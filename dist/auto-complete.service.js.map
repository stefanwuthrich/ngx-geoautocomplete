{"version":3,"file":"auto-complete.service.js","sourceRoot":"","sources":["../src/auto-complete.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable, PLATFORM_ID, Inject} from '@angular/core';\nimport {isPlatformBrowser} from '@angular/common';\nimport {GlobalRef} from './windowRef.service';\nimport {HttpClient, HttpParams} from '@angular/common/http';\nimport {LocalStorageService} from './storage.service';\n\n@Injectable()\nexport class AutoCompleteSearchService {\n  constructor(private _http: HttpClient, @Inject(PLATFORM_ID) private platformId: Object,\n              private _global: GlobalRef, private _localStorageService: LocalStorageService) {\n\n  }\n\n  getPredictions(url: string, query: string): Promise<any> {\n    return new Promise(resolve => {\n      this._http.get(url, {params: new HttpParams().set(\"query\", query)})\n        .subscribe((data: any) => {\n          if (data) {\n            resolve(data);\n          } else {\n            resolve(false);\n          }\n        });\n    });\n  }\n\n\n  getLatLngDetail(url: string, lat: string, lng: string): Promise<any> {\n    return new Promise(resolve => {\n      this._http.get(url, {params: new HttpParams().set(\"lat\", lat).set(\"lng\", lng)})\n        .subscribe((data: any) => {\n          if (data) {\n            resolve(data);\n          } else {\n            resolve(false);\n          }\n        });\n    });\n  }\n\n\n  getPlaceDetails(url: string, placeId: string): Promise<any> {\n    return new Promise(resolve => {\n      this._http.get(url, {params: new HttpParams().set(\"query\", placeId)})\n        .subscribe((data: any) => {\n          if (data) {\n            resolve(data);\n          } else {\n            resolve(false);\n          }\n        });\n    });\n  }\n\n  getGeoCurrentLocation(): Promise<any> {\n    return new Promise(resolve => {\n      if (isPlatformBrowser(this.platformId)) {\n        let _window: any = this._global.nativeGlobal;\n        if (_window.navigator.geolocation) {\n          _window.navigator.geolocation.getCurrentPosition((pos) => {\n            let latlng: any = {lat: parseFloat(pos.coords.latitude + ''), lng: parseFloat(pos.coords.longitude + '')};\n            resolve(latlng);\n          }, (error) => {\n            resolve(false);\n          });\n        } else {\n          resolve(false);\n        }\n      } else {\n        resolve(false);\n      }\n    });\n  }\n\n  getGeoLatLngDetail(latlng: any): Promise<any> {\n    return new Promise(resolve => {\n      if (isPlatformBrowser(this.platformId)) {\n        let _window: any = this._global.nativeGlobal;\n        let geocoder: any = new _window.google.maps.Geocoder;\n        geocoder.geocode({'location': latlng}, (results, status) => {\n          if (status === 'OK') {\n            this.getGeoPlaceDetail(results[0].place_id).then((result) => {\n              if (result) {\n                resolve(result);\n              } else {\n                resolve(false);\n              }\n            });\n          } else {\n            resolve(false);\n          }\n        });\n      } else {\n        resolve(false);\n      }\n    });\n  }\n\n  getGeoPrediction(params: any): Promise<any> {\n    return new Promise(resolve => {\n      if (isPlatformBrowser(this.platformId)) {\n        let _window: any = this._global.nativeGlobal;\n        let placesService: any = new _window.google.maps.places.AutocompleteService();\n        let queryInput: any = {};\n        let promiseArr: any = [];\n        if (params.countryRestriction.length) {\n          queryInput = {\n            input: params.query,\n            componentRestrictions: {country: params.countryRestriction},\n          };\n        } else {\n          queryInput = {\n            input: params.query\n          };\n        }\n        if (params.geoLocation) {\n          queryInput.location = new _window.google.maps.LatLng(parseFloat(params.geoLocation[0]), parseFloat(params.geoLocation[1]));\n          queryInput.radius = params.radius;\n        }\n        if (params.geoTypes.length) {\n          for (let i: number = 0; i < params.geoTypes.length; i++) {\n            let _tempQuery: any = queryInput;\n            _tempQuery['types'] = new Array(params.geoTypes[i]);\n            promiseArr.push(this.geoPredictionCall(placesService, _tempQuery));\n          }\n        } else {\n          promiseArr.push(this.geoPredictionCall(placesService, queryInput));\n        }\n\n        Promise.all(promiseArr).then(values => {\n          let val: any = values;\n          if (val.length > 1) {\n            let _tempArr: any = [];\n            for (let j: number = 0; j < val.length; j++) {\n              if (val[j] && val[j].length) {\n                _tempArr = _tempArr.concat(val[j]);\n              }\n            }\n            _tempArr = this.getUniqueResults(_tempArr);\n            resolve(_tempArr);\n          } else {\n            resolve(values[0]);\n          }\n        });\n      } else {\n        resolve(false);\n      }\n    });\n  }\n\n  getGeoPlaceDetail(placeId: string): Promise<any> {\n    return new Promise(resolve => {\n      if (isPlatformBrowser(this.platformId)) {\n        let _window: any = this._global.nativeGlobal;\n        let placesService: any = new _window.google.maps.places.PlacesService(document.createElement('div'));\n        placesService.getDetails({'placeId': placeId}, (result: any, status: any) => {\n          if (result == null || result.length === 0) {\n            this.getGeoPaceDetailByReferance(result.referance).then((referanceData: any) => {\n              if (!referanceData) {\n                resolve(false);\n              } else {\n                resolve(referanceData);\n              }\n            });\n          } else {\n            resolve(result);\n          }\n        });\n      } else {\n        resolve(false);\n      }\n    });\n  }\n\n  getGeoPaceDetailByReferance(referance: string): Promise<any> {\n    return new Promise(resolve => {\n      if (isPlatformBrowser(this.platformId)) {\n        let _window: any = this._global.nativeGlobal;\n        let placesService: any = new _window.google.maps.places.PlacesService();\n        placesService.getDetails({'reference': referance}, (result: any, status: any) => {\n          if (status === _window.google.maps.places.PlacesServiceStatus.OK) {\n            resolve(result);\n          } else {\n            resolve(false);\n          }\n        });\n      } else {\n        resolve(false);\n      }\n    });\n  }\n\n  addRecentList(localStorageName: string, result: any, itemSavedLength: number): any {\n    this.getRecentList(localStorageName).then((data: any) => {\n      if (data) {\n        for (let i: number = 0; i < data.length; i++) {\n          if (data[i].description === result.description) {\n            data.splice(i, 1);\n            break;\n          }\n        }\n        data.unshift(result);\n        if (data.length > itemSavedLength) {\n          data.pop();\n        }\n        this._localStorageService.setItem(localStorageName, JSON.stringify(data));\n      }\n    });\n  }\n\n\n  getRecentList(localStorageName: string): Promise<any> {\n    return new Promise(resolve => {\n      let value: any = this._localStorageService.getItem(localStorageName);\n      if (value) {\n        value = JSON.parse(value);\n      } else {\n        value = [];\n      }\n      resolve(value);\n    });\n  }\n\n  private getUniqueResults(arr: any): any {\n    return Array.from(arr.reduce((m, t) => m.set(t.place_id, t), new Map()).values());\n  }\n\n  private geoPredictionCall(placesService: any, queryInput: any): Promise<any> {\n    let _window: any = this._global.nativeGlobal;\n    return new Promise(resolve => {\n      placesService.getPlacePredictions(queryInput, (result: any, status: any) => {\n        if (status === _window.google.maps.places.PlacesServiceStatus.OK) {\n          resolve(result);\n        } else {\n          resolve(false);\n        }\n      });\n    });\n  }\n\n}\n"]}